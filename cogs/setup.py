from discord import Role, TextChannel, Permissions, Embed, Color
from discord.ext import commands
from discord.utils import get

from sqlite3 import connect


class Setup(commands.Cog, name='Setup'):
    """
    Module rassemblant les commandes pour configurer le bot.
    """
    def __init__(self, bot):
        self.bot = bot  

    @commands.command(brief='!setup [verif/mute/logs/temp] [@role/#channel]', description='D√©finir un role pour "verif" ou "mute"')
    @commands.has_permissions(administrator=True)
    async def setup(self, ctx, mtype: str, setup_data):
        if mtype.lower() in ['verif', 'mute']:
            mod = get(ctx.guild.roles, id=int(setup_data.strip('<@&>')))
        elif mtype.lower() in ['temp', 'logs']:
            mod = get(ctx.guild.channels, id=int(setup_data.strip('<#>')))
        else:
            embed = Embed(title='‚ùå Oups ! Il y a une erreur :', description='Choix invalide ! (verif/mute/logs/temp)', color=0xe74c3c)
            await ctx.send(embed=embed); return
        with connect('data.db') as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM setup WHERE Guild_ID=?', (ctx.guild.id,))
            if c.fetchone() is None:
                c.execute(f'INSERT INTO setup (Guild_ID, {mtype.capitalize()}) VALUES (?, ?)', (ctx.guild.id, mod.id))
            else:
                c.execute(f'UPDATE setup SET {mtype.capitalize()}=? WHERE Guild_ID=?', (mod.id, ctx.guild.id))
            conn.commit()
        embed = (Embed(description=f'{ctx.author.mention} a d√©fini {mod.mention} pour "{mtype}"', color=0xa84300)
                 .set_author(name=f'{ctx.author} a modifi√© "{mtype}"', icon_url=ctx.author.avatar_url))
        await ctx.send(embed=embed)

    @commands.command(hidden=True)
    @commands.has_permissions(manage_messages=True)
    async def regles(self, ctx):
        rules = {
            'üëç R√®gle n¬∞1': "Respect mutuel ! Pour un chat sympa et bienveillant, pas d'insultes ou de m√©chancet√©s",
            'üó≥Ô∏è R√®gle n¬∞2': "C'est un serveur d√©di√© √† @E - Wizard#3217. Pas de sujets politiques, religieux et pas de racisme, de harc√®lement ou de contenu offensif.",
            'üîï R√®gle n¬∞3': "Pas de spam ou de mentions abusives. Pour √©viter d'avoir un chat qui ressemble √† rien, √©vitez les abus.",
            'üë¶ R√®gle n¬∞4': "Ayez un avatar et un pseudo appropri√© (family-friendly)",
            'üîí R√®gle n¬∞5': "Ne partagez pas vos informations personnelles ! Prot√©gez votre intimit√© et celle des autres.",
            'üíõ R√®gle n¬∞6': "Utilisez votre bon sens. Ne faites pas aux autres ce que vous ne voudriez pas qu'on vous fasse.",
            'üí¨ R√®gle n¬∞7': "√âvitez la pub ! Vous pouvez partager vos projets dans #vos-projects.",
            'üôè R√®gle n¬∞8': "Pas de mandiage de role. C'est juste une perte de temps et √ßa ne marchera jamais.",
            'üìë R√®gle n¬∞9': "Repectez les [Guidelines de la Communaut√© Discord](https://discord.com/guidelines) et les [Conditions d'utilisation](https://discord.com/terms).",
        }
        embed = Embed(title="üìÉ R√®gles du serveur:", description='Appuie sur ‚úÖ apr√®s avoir lu les r√®gles :',color=0xa84300)
        for key, value in rules.items():
            embed.add_field(name=key, value=f"{value}\n", inline=False)
        await ctx.message.delete()
        msg = await ctx.send(embed=embed)
        await msg.add_reaction('‚úÖ')

    @commands.command(brief='!roles', description='Setup a role menu')
    @commands.has_permissions(manage_roles=True)
    async def roles(self, ctx):
        def check(role: Role):
            r = role.permissions
            return (r.manage_messages or r.administrator or r.manage_roles or r.ban_members
                    or r.kick_members or r.manage_guild or r.manage_nicknames or r.manage_channels
                    or r.mute_members or r.deafen_members or r.move_members or r.manage_emojis
                    or role.managed or role==role.guild.default_role)
        roles = [role for role in ctx.guild.roles if not check(role)]
        embed = Embed(title='üîß Menu de setup de roles', description='R√©agis au message pour d√©finir un emoji au role s√©lectionn√©.\n Tu peux aussi appuyer sur ‚ùå pour supprimer le role du menu.', color=0x11806a)
        for i, role in enumerate(roles):
            embed.add_field(name=role.name if i else f'>> {role.name} <<' , value="Pas d'√©moji d√©fini", inline=False)
        embed.set_footer(text=f"{embed.fields[0].name.strip('>< ')} ‚Ä¢ Pas d'√©moji d√©fini ‚Ä¢ Appuie sur üîß quand tu as fini")
        msg = await ctx.send(embed=embed)
        for reaction in ['‚è™', '‚è©', '‚ùå', 'üîß']:
            await msg.add_reaction(reaction)

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        if payload.member.bot: return
        member = payload.member
        guild = member.guild
        emoji = payload.emoji
        channel = self.bot.get_channel(payload.channel_id)
        message = await channel.fetch_message(payload.message_id)
        reaction = get(message.reactions, emoji=emoji.name)
        embed = message.embeds[0]
        
        with connect('data.db') as conn:
            c = conn.cursor()
            c.execute('SELECT Verif FROM setup WHERE Guild_ID=?', (guild.id,))
            role = get(guild.roles, id=c.fetchone()[0])
        if emoji.name == '‚úÖ':
            if not role in member.roles:
                await member.add_roles(role)
            return
        if 'üó∫Ô∏è Menu des roles' == embed.title:
            for field in embed.fields:
                if emoji.name in field.value:
                    role = get(guild.roles, name=field.value.split(' : ')[1].strip('`'))
                    await member.add_roles(role)
                    return
        if not payload.member.guild_permissions.administrator: return

        for i, field in enumerate(embed.fields):
            if '>>' not in field.name:
                continue
            if emoji.name in ['‚è™', '‚è©', '‚ùå']:
                field_nb, name = len(embed.fields)-1, field.name.strip('<> ')
                index = field_nb if (i==0 and emoji.name in ['‚è™', '‚ùå']) else (0 if (i==field_nb and emoji.name in ['‚è©', '‚ùå']) else (i-1 if emoji.name=='‚è™' else i+1))
                switch = embed.fields[index]
                embed.set_field_at(index if emoji!='‚ùå' else i, name=f'>> {switch.name} <<', value=switch.value, inline=False)
                embed.set_footer(text=f"{switch.name} ‚Ä¢ {switch.value} ‚Ä¢ Appuie sur üîß quand tu as fini")
                if emoji.name == '‚ùå':
                    role = get(guild.roles, name=name)
                    embed.remove_field(i)
                else:
                    embed.set_field_at(i, name=name, value=field.value, inline=False)
            elif emoji.name == 'üîß':
                emojis = [field.value.strip("√âmoji ‚Üí Pas d'√©moji d√©fini") for field in embed.fields]
                if '' in emojis:
                    await channel.send('Vous devez d√©finir tous les emojis avant de confirmer !', delete_after=5)
                    return
                role_embed = Embed(title='üó∫Ô∏è Menu des roles', color=0xf1c40f)
                for emoji, field in zip(emojis, embed.fields):
                    name = field.name.strip('<> ')
                    role_embed.add_field(name='\u200b', value=f"{emoji} : `{name}`", inline=False)
                await channel.purge(limit=2)
                msg = await channel.send(embed=role_embed)
                for emoji in emojis:
                    await msg.add_reaction(emoji)
            else:
                embed.set_field_at(i, name=embed.fields[i].name, value=f'√âmoji ‚Üí {emoji}')
            try:
                await message.edit(embed=embed)
                await reaction.remove(member)
            except:
                pass

    @commands.Cog.listener()
    async def on_raw_reaction_remove(self, payload):
        guild = await self.bot.fetch_guild(payload.guild_id)
        member = await guild.fetch_member(payload.user_id)
        if member.bot: return
        emoji = payload.emoji
        channel = self.bot.get_channel(payload.channel_id)
        message = await channel.fetch_message(payload.message_id)
        embed = message.embeds[0]
        if 'üó∫Ô∏è Menu des roles' == embed.title:
            for field in embed.fields:
                if emoji.name in field.value:
                    role = get(guild.roles, name=field.value.split(' : ')[1].strip('`'))
                    await member.remove_roles(role)

    @commands.Cog.listener()
    async def on_guild_join(self, guild):
        with connect('data.db') as conn:
            c = conn.cursor()
            c.execute("INSERT INTO logs (ID, State) VALUES (?, ?)", (guild.id, 0))
            c.execute(f'CREATE TABLE IF NOT EXISTS "{guild.id}" (User_ID INTEGER, Warns TEXT, Mute INTEGER, Verif INTEGER, Temp INTEGER)')
            conn.commit()
        channel = await self.bot.fetch_channel(747480897426817095)
        embed = (Embed(color=0xf1c40f)
                 .add_field(name='üë• Membres', value=f'{guild.member_count} members')
                 .add_field(name='üåç R√©gion', value=str(guild.region).capitalize())
                 .add_field(name='üóùÔ∏è Owner', value=guild.owner)
                 .set_author(name=f'''J'ai rejoint "{guild.name}"''', icon_url=guild.icon_url))
        await channel.send(embed=embed)


def setup(bot):
    bot.add_cog(Setup(bot))